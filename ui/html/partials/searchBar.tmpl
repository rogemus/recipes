{{ define "searchBar" }}

<form method="post" action="/recipes-search">
  <div @click.outside="reset" x-data="search">
    <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
    <div class="form-group">
      <label class="form-label" for="search">Search</label>
      <input class="form-input" @keyup="handleType" @focus="handleFocus" x-model="query" type="text" name="query"
        id="search" placeholder="Search recipes ..." </div>
      {{ with .Form.FieldErrors.query }}
      {{ range . }}<div class="form-input-hint">{{ . }}</div> {{ end }}
      {{ end }}
      <button type="submit">Search</button>
      <div class="results" x-show="focused">
        <template x-if="results.length > 0 && hasResults">
          <ul>
            <template x-for="result in results">
              <li>
                <a x-bind:href="`/recipes/${result.id}`" class="h6"><span x-text="result.title"></span></a>
              </li>
            </template>
          </ul>
        </template>
        <template x-if="results.length === 0 && hasResults">
          <p> No result for your query....</p>
        </template>
      </div>
    </div>
</form>
<script nonce="tw5bsz59ychjgg5ndo3r">

  document.addEventListener('alpine:init', () => {
    Alpine.data('search', () => ({
      query: "",
      focused: false,
      hasResults: false,
      results: [],
      reset() {
        this.focused = false;
        this.hasResults = false;
        this.results = [];
      },
      handleFocus() {
        this.focused = true
      },
      async handleType() {
        if (this.query.length >= 3) {
          try {
            const response = await fetch("/recipes-autocomplete", {
              method: "POST",
              body: JSON.stringify({query: this.query}),
              headers: {
                "Content-Type": "application/json",
              },
            })

            const json = await response.json()
            this.results = json
          } catch (err) {
            console.error(err)
          } finally {
            this.hasResults = true
          }
        }
      }
    }))
  });

</script>

{{ end }}
